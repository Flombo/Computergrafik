using System;
using System.Collections.Generic;
using System.Linq;
using Fusee.Base.Common;
using Fusee.Base.Core;
using Fusee.Engine.Common;
using Fusee.Engine.Core;
using Fusee.Math.Core;
using Fusee.Serialization;
using Fusee.Xene;
using static System.Math;
using static Fusee.Engine.Core.Input;
using static Fusee.Engine.Core.Time;

namespace Fusee.Tutorial.Core
{
    public class FirstSteps : RenderCanvas
    {
        // Init is called on startup. 
        private SceneNodeContainer cubeNode = new SceneNodeContainer();
        private float i=0.2f;
        private TransformComponent _cubeTransform2;
        private TransformComponent _cubeTransform1;
        private TransformComponent _cubeTransform;
        private float _camAngle = 0;
        private SceneContainer _scene;
        private SceneRenderer _sceneRenderer;
        public override void Init()
        {

            // Set the clear color for the backbuffer to white (100% intentsity in all color channels R, G, B, A).
      RC.ClearColor = new float4(0.7f, 1, 0.5f, 1);

      // Create a scene with a cube
      // The three components: one XForm, one Material and the Mesh
      _cubeTransform = new TransformComponent {Scale = new float3(1, 1, 1), Translation = new float3(-50, 0, 0)};
      _cubeTransform1= new TransformComponent{Scale = new float3(0.5f,0.5f,0.5f), Translation=new float3(10,0.5f,0)};
       _cubeTransform2= new TransformComponent{Scale = new float3(1,1,1), Translation=new float3(0,10,0.5f)};
      var cubeMaterial = new MaterialComponent
      {
          Diffuse = new MatChannelContainer {Color = new float3(0, 0, 1)},
          Specular = new SpecularChannelContainer {Color = float3.One, Shininess = 4}
      };
       var cubeMaterial1 = new MaterialComponent
      {
          Diffuse = new MatChannelContainer {Color = new float3(1, 0, 1)},
          Specular = new SpecularChannelContainer {Color = float3.One, Shininess = 4}
      };
          var cubeMaterial2 = new MaterialComponent
      {
          Diffuse = new MatChannelContainer {Color = new float3(1, 0.2f, 1)},
          Specular = new SpecularChannelContainer {Color = float3.One, Shininess = 4}
      };
      var cubeMesh = SimpleMeshes.CreateCuboid(new float3(2, 2, 3));
      var cubeMesh1 = SimpleMeshes.CreateCuboid(new float3(5, 5,5));
      var cubeMesh2 = SimpleMeshes.CreateCuboid(new float3(3, 3,3));
      
      
      // Assemble the cube node containing the three components
      
      cubeNode.Components = new List<SceneComponentContainer>();
      cubeNode.Components.Add(_cubeTransform);
      cubeNode.Components.Add(cubeMaterial);
      cubeNode.Components.Add(cubeMesh);
      cubeNode.Components.Add(_cubeTransform1);
      cubeNode.Components.Add(cubeMaterial1);
      cubeNode.Components.Add(cubeMesh1);
      cubeNode.Components.Add(_cubeTransform2);
      cubeNode.Components.Add(cubeMaterial2);
      cubeNode.Components.Add(cubeMesh2);
      
      // Create the scene containing the cube as the only object
      _scene = new SceneContainer();
      _scene.Children = new List<SceneNodeContainer>();
      _scene.Children.Add(cubeNode);
      
      // Create a scene renderer holding the scene above
      _sceneRenderer = new SceneRenderer(_scene);


        }

        // RenderAFrame is called once a frame
        public override void RenderAFrame()
        {
          RC.Clear(ClearFlags.Color | ClearFlags.Depth);

      // Animate the camera angle
  
        
        _cubeTransform.Translation = new float3(0, 10 * M.Sin(4 * TimeSinceStart), 0);
        _cubeTransform.Rotation = new float3(10*i, 10,10);
        _cubeTransform2.Rotation = new float3(0,10,10*i);
        _cubeTransform1.Rotation = new float3(0,10*i,10);

        if(i<=3.0f){
        _cubeTransform.Scale= new float3(1*i, 1*i, 1*i);
        i+=0.01f;
        
        }else{

            i=0.1f;

        }
       

    // Setup the camera 
        RC.View = float4x4.CreateTranslation(0, 0, 50) * float4x4.CreateRotationY(_camAngle);

      // Render the scene on the current render context
      _sceneRenderer.Render(RC);

      // Swap buffers: Show the contents of the backbuffer (containing the currently rendered farame) on the front buffer.
      Present();

        }


        // Is called when the window was resized
        public override void Resize()
        {
            // Set the new rendering area to the entire new windows size
            RC.Viewport(0, 0, Width, Height);

            // Create a new projection matrix generating undistorted images on the new aspect ratio.
            var aspectRatio = Width / (float)Height;

            // 0.25*PI Rad -> 45Â° Opening angle along the vertical direction. Horizontal opening angle is calculated based on the aspect ratio
            // Front clipping happens at 1 (Objects nearer than 1 world unit get clipped)
            // Back clipping happens at 2000 (Anything further away from the camera than 2000 world units gets clipped, polygons will be cut)
            var projection = float4x4.CreatePerspectiveFieldOfView(M.PiOver4, aspectRatio, 1, 20000);
            RC.Projection = projection;
        }
    }
}
